name: Build and Release Docker Images

on:
  workflow_dispatch: {}   # Manual trigger only

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version from AssemblyInfo.cs
        id: get_version
        shell: pwsh
        run: |
          $assemblyInfo = Get-Content "TinyOPDS\Properties\AssemblyInfo.cs"
          $versionLine = $assemblyInfo | Select-String -Pattern '\[assembly: AssemblyVersion\("(.*)"\)\]'
          $fullVersion = $versionLine.Matches[0].Groups[1].Value
          # Convert 3.5.0.0 to 3.5
          $version = $fullVersion -replace '(\d+\.\d+).*', '$1'
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "Detected version: $version from $fullVersion"

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2
        with:
          nuget-version: 'latest'

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Restore NuGet (TinyOPDS)
        run: nuget restore TinyOPDS\TinyOPDS.csproj -PackagesDirectory TinyOPDS\packages

      - name: Restore NuGet (TinyOPDSCLI)
        run: nuget restore TinyOPDSCLI\TinyOPDSCLI.csproj -PackagesDirectory TinyOPDS\packages

      - name: Build solution
        run: msbuild TinyOPDS.sln /p:Configuration=Release /p:Platform="Any CPU" /m

      - name: Prepare artifacts for Docker
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path docker-artifacts
          Copy-Item TinyOPDS\bin\Release\TinyOPDS.exe docker-artifacts\
          Copy-Item TinyOPDSCLI\bin\Release\TinyOPDSCLI.exe docker-artifacts\

      - name: Upload artifacts for Docker job
        uses: actions/upload-artifact@v4
        with:
          name: tinyopds-binaries
          path: docker-artifacts/*

  docker-build:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
        target: [cli, gui]
        include:
          - platform: linux/amd64
            arch: amd64
          - platform: linux/arm64  
            arch: arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: tinyopds-binaries
          path: docker/app

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker buildx build \
            --platform ${{ matrix.platform }} \
            --target ${{ matrix.target }} \
            --tag tinyopds-${{ matrix.target }}:${{ needs.build.outputs.version }} \
            --load \
            -f docker/Dockerfile \
            docker/

      - name: Export Docker image to tar
        run: |
          IMAGE_NAME="tinyopds-${{ matrix.target }}"
          VERSION="${{ needs.build.outputs.version }}"
          ARCH="${{ matrix.arch }}"
          TAR_NAME="${IMAGE_NAME}-${VERSION}-linux-${ARCH}.tar"
          
          docker save -o ${TAR_NAME} ${IMAGE_NAME}:${VERSION}
          gzip ${TAR_NAME}
          
          echo "Exported: ${TAR_NAME}.gz"
          ls -lh ${TAR_NAME}.gz

      - name: Upload tar as artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-${{ matrix.target }}-${{ matrix.arch }}
          path: "*.tar.gz"

  create-release:
    runs-on: ubuntu-latest
    needs: [build, docker-build]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-files

      - name: Prepare release files
        run: |
          mkdir -p final-release
          find release-files -name "*.tar.gz" -exec cp {} final-release/ \;
          ls -lh final-release/

      - name: Create release notes
        run: |
          VERSION="${{ needs.build.outputs.version }}"
          cat > release-notes.md <<EOF
          ## TinyOPDS ${VERSION} Docker Images
          
          ### Included files:
          - \`tinyopds-cli-${VERSION}-linux-amd64.tar.gz\` - CLI version for Linux/MacOS Intel/AMD
          - \`tinyopds-cli-${VERSION}-linux-arm64.tar.gz\` - CLI version for Linux/MacOS ARM (Apple Silicon)
          - \`tinyopds-gui-${VERSION}-linux-amd64.tar.gz\` - GUI version for Linux/MacOS Intel/AMD  
          - \`tinyopds-gui-${VERSION}-linux-arm64.tar.gz\` - GUI version for Linux/MacOS ARM (Apple Silicon)
          
          ### Usage:
          1. Download the appropriate file for your architecture
          2. Load image: \`docker load < tinyopds-cli-${VERSION}-linux-amd64.tar.gz\`
          3. Run container: \`docker run -p 8080:8080 -v ~/Books:/data tinyopds-cli:${VERSION} --library=/data --port=8080\`
          
          ### GUI version (with noVNC):
          - Run: \`docker run -p 8080:8080 -p 6080:6080 -v ~/Books:/data tinyopds-gui:${VERSION}\`
          - Open browser: \`http://localhost:6080\`
          
          ### Architecture compatibility:
          - **amd64**: Linux x86_64, Windows (WSL2), MacOS Intel
          - **arm64**: Linux ARM, MacOS Apple Silicon (M1/M2/M3)
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.build.outputs.version }}-docker
          name: TinyOPDS ${{ needs.build.outputs.version }} docker releases
          body_path: release-notes.md
          draft: false
          prerelease: false
          files: final-release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
